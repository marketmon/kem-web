// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents the different categories of endeavors
enum Category {
  PERSONAL_DEVELOPMENT
  SPORT
  DEEP_TECH
  OUTDOORS
  COMMUNITY_TECH
}

// Represents the educational stages
enum EducationLevel {
  K_8
  HIGH_SCHOOL
  COLLEGE
  GRADUATE
}

enum ReasonForReading {
  PLEASURE
  ACADEMICS
}

enum Term {
  FULL
  FALL
  SPRING
}

enum CollaboratorType {
  MENTOR
  COLLABORATOR
  PROFESSOR
}

// Represents experiences outside of school
model Endeavor {
  id            String        @id @default(cuid())
  entity        String
  title         String
  description   String
  link          String?
  imageUrl      String?
  startDate     DateTime
  endDate       DateTime?
  category      Category
  artifacts     Artifact[]
  contributions Contribution[]
  mentors       Collaborator[] @relation("EndeavorCollaborators")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Represents projects within each endeavor
model Artifact {
  id             String         @id @default(cuid())
  title          String
  description    String
  imageUrl       String?
  link           String?
  completionDate DateTime
  endeavorId     String?
  endeavor       Endeavor?      @relation(fields: [endeavorId], references: [id])
  classId        String?
  class          Class?         @relation(fields: [classId], references: [id])
  contributions  Contribution[]
  collaborators  Collaborator[] @relation("ArtifactCollaborators")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([endeavorId])
  @@index([classId])
}

// Represents one academic year of school
model Knowledge {
  id          String         @id @default(cuid())
  year        Int
  title       String
  location    String
  institution String
  reflection  String?
  classes     Class[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Represents specific classes taken
model Class {
  id            String        @id @default(cuid())
  name          String
  term          Term
  description   String?
  professor     Collaborator[] @relation("ClassCollaborators")
  knowledgeId   String
  knowledge     Knowledge     @relation(fields: [knowledgeId], references: [id])
  artifacts     Artifact[]
  contributions Contribution[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([knowledgeId])
}

// Represents soft skills (adjectives)
model Characteristic {
  id            String        @id @default(cuid())
  title         String        @unique
  description   String?
  contributions Contribution[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Represents hard skills
model Skill {
  id            String        @id @default(cuid())
  title         String        @unique
  description   String?
  contributions Contribution[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Junction table tracking how artifacts, classes, and endeavors contribute to skills and characteristics
model Contribution {
  id               String          @id @default(cuid())
  description      String?
  strengthLevel    Int             @default(1) // 1-10 scale for contribution strength
  
  // Optional relations to contributing entities (one of these must be non-null)
  artifactId       String?
  artifact         Artifact?       @relation(fields: [artifactId], references: [id])
  classId          String?
  class            Class?          @relation(fields: [classId], references: [id])
  endeavorId       String?
  endeavor         Endeavor?       @relation(fields: [endeavorId], references: [id])
  
  // Target skill or characteristic (one of these must be non-null)
  skillId          String?
  skill            Skill?          @relation(fields: [skillId], references: [id])
  characteristicId String?
  characteristic   Characteristic? @relation(fields: [characteristicId], references: [id])
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

}

model Collaborator {
  id            String      @id @default(cuid())
  name          String
  linkedin      String?
  type          CollaboratorType
  artifacts     Artifact[]  @relation("ArtifactCollaborators")
  endeavors     Endeavor[]  @relation("EndeavorCollaborators")
  classes       Class[]     @relation("ClassCollaborators")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Represents books read
model Book {
  id               String   @id @default(cuid())
  title            String
  author           String
  imageUrl         String?
  readingOrder     Int      @unique // Chronological order of books read
  reasonForReading ReasonForReading
  reflection       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model BookRec {
    id             String   @id @default(cuid())
    title          String
    author         String
    why            String
    recommender    String
    email          String
    createdAt      DateTime @default(now())
}